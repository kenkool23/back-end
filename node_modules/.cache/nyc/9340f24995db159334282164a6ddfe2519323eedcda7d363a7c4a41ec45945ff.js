'use strict';// express is a nodejs web server
// https://www.npmjs.com/package/express
var cov_1jktcndd4e=function(){var path="/home/kenneth_afolabi23/back-end/server.js";var hash="2828f29491a9b0dee405a4f8e332257d5af7110c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/kenneth_afolabi23/back-end/server.js",statementMap:{"0":{start:{line:5,column:16},end:{line:5,column:34}},"1":{start:{line:9,column:19},end:{line:9,column:41}},"2":{start:{line:12,column:12},end:{line:12,column:21}},"3":{start:{line:15,column:0},end:{line:15,column:27}},"4":{start:{line:19,column:19},end:{line:24,column:1}},"5":{start:{line:30,column:0},end:{line:32,column:3}},"6":{start:{line:31,column:4},end:{line:31,column:17}},"7":{start:{line:35,column:0},end:{line:37,column:3}},"8":{start:{line:36,column:4},end:{line:36,column:35}},"9":{start:{line:42,column:0},end:{line:44,column:3}},"10":{start:{line:43,column:4},end:{line:43,column:25}},"11":{start:{line:49,column:0},end:{line:60,column:3}},"12":{start:{line:51,column:15},end:{line:55,column:6}},"13":{start:{line:57,column:4},end:{line:57,column:31}},"14":{start:{line:59,column:4},end:{line:59,column:25}},"15":{start:{line:62,column:0},end:{line:65,column:3}},"16":{start:{line:63,column:4},end:{line:63,column:29}},"17":{start:{line:64,column:4},end:{line:64,column:51}},"18":{start:{line:67,column:13},end:{line:67,column:17}},"19":{start:{line:68,column:15},end:{line:73,column:2}},"20":{start:{line:69,column:17},end:{line:69,column:41}},"21":{start:{line:70,column:17},end:{line:70,column:38}},"22":{start:{line:72,column:4},end:{line:72,column:66}},"23":{start:{line:75,column:0},end:{line:75,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:30,column:13},end:{line:30,column:14}},loc:{start:{line:30,column:27},end:{line:32,column:1}},line:30},"1":{name:"(anonymous_1)",decl:{start:{line:35,column:20},end:{line:35,column:21}},loc:{start:{line:35,column:34},end:{line:37,column:1}},line:35},"2":{name:"(anonymous_2)",decl:{start:{line:42,column:19},end:{line:42,column:20}},loc:{start:{line:42,column:33},end:{line:44,column:1}},line:42},"3":{name:"(anonymous_3)",decl:{start:{line:49,column:19},end:{line:49,column:20}},loc:{start:{line:49,column:33},end:{line:60,column:1}},line:49},"4":{name:"(anonymous_4)",decl:{start:{line:62,column:8},end:{line:62,column:9}},loc:{start:{line:62,column:33},end:{line:65,column:1}},line:62},"5":{name:"(anonymous_5)",decl:{start:{line:68,column:32},end:{line:68,column:33}},loc:{start:{line:68,column:38},end:{line:73,column:1}},line:68}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"2828f29491a9b0dee405a4f8e332257d5af7110c"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const express=(cov_1jktcndd4e.s[0]++,require('express'));// converts content in the request into parameter req.body
// https://www.npmjs.com/package/body-parser
const bodyParser=(cov_1jktcndd4e.s[1]++,require('body-parser'));// create the server
const app=(cov_1jktcndd4e.s[2]++,express());// the backend server will parse json, not a form request
cov_1jktcndd4e.s[3]++;app.use(bodyParser.json());// mock events data - for a real solution this data should be coming 
// from a cloud data store
const mockEvents=(cov_1jktcndd4e.s[4]++,{events:[{title:'an event',id:1,description:'something really cool'},{title:'another event',id:2,description:'something even cooler'}]});// health endpoint - returns an empty array
cov_1jktcndd4e.s[5]++;app.get('/',(req,res)=>{cov_1jktcndd4e.f[0]++;cov_1jktcndd4e.s[6]++;res.json([]);});// version endpoint to provide easy convient method to demonstrating tests pass/fail
cov_1jktcndd4e.s[7]++;app.get('/version',(req,res)=>{cov_1jktcndd4e.f[1]++;cov_1jktcndd4e.s[8]++;res.json({version:'1.0.0'});});// mock events endpoint. this would be replaced by a call to a datastore
// if you went on to develop this as a real application.
cov_1jktcndd4e.s[9]++;app.get('/events',(req,res)=>{cov_1jktcndd4e.f[2]++;cov_1jktcndd4e.s[10]++;res.json(mockEvents);});// Adds an event - in a real solution, this would insert into a cloud datastore.
// Currently this simply adds an event to the mock array in memory
// this will produce unexpected behavior in a stateless kubernetes cluster. 
cov_1jktcndd4e.s[11]++;app.post('/event',(req,res)=>{cov_1jktcndd4e.f[3]++;// create a new object from the json data and add an id
const ev=(cov_1jktcndd4e.s[12]++,{title:req.body.title,description:req.body.description,id:mockEvents.events.length+1// add to the mock array
});cov_1jktcndd4e.s[13]++;mockEvents.events.push(ev);// return the complete array
cov_1jktcndd4e.s[14]++;res.json(mockEvents);});cov_1jktcndd4e.s[15]++;app.use((err,req,res,next)=>{cov_1jktcndd4e.f[4]++;cov_1jktcndd4e.s[16]++;console.error(err.stack);cov_1jktcndd4e.s[17]++;res.status(500).json({message:err.message});});const PORT=(cov_1jktcndd4e.s[18]++,8082);const server=(cov_1jktcndd4e.s[19]++,app.listen(PORT,()=>{cov_1jktcndd4e.f[5]++;const host=(cov_1jktcndd4e.s[20]++,server.address().address);const port=(cov_1jktcndd4e.s[21]++,server.address().port);cov_1jktcndd4e.s[22]++;console.log(`Events app listening at http://${host}:${port}`);}));cov_1jktcndd4e.s[23]++;module.exports=app;